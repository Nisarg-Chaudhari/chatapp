Help on User in module django.contrib.auth.models object:

class UUsseerr(AbstractUser)
 |  User(*args, **kwargs)
 |  
 |  Users within the Django authentication system are represented by this
 |  model.
 |  
 |  Username and password are required. Other fields are optional.
 |  
 |  Method resolution order:
 |      User
 |      AbstractUser
 |      django.contrib.auth.base_user.AbstractBaseUser
 |      PermissionsMixin
 |      django.db.models.base.Model
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ggeett__nneexxtt__bbyy__ddaattee__jjooiinneedd = _method(self, *, field=<django.db.models.fields.DateTimeField: date_joined>, is_next=True, **kwargs)
 |  
 |  ggeett__pprreevviioouuss__bbyy__ddaattee__jjooiinneedd = _method(self, *, field=<django.db.models.fields.DateTimeField: date_joined>, is_next=False, **kwargs)
 |  
 |  iidd = <django.db.models.query_utils.DeferredAttribute object>
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ffrroomm__wwhhoomm
 |      Accessor to the related objects manager on the reverse side of a
 |      many-to-one relation.
 |      
 |      In the example::
 |      
 |          class Child(Model):
 |              parent = ForeignKey(Parent, related_name='children')
 |      
 |      ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.
 |      
 |      Most of the implementation is delegated to a dynamically defined manager
 |      class built by ``create_forward_many_to_many_manager()`` defined below.
 |  
 |  ggrroouuppss
 |      Accessor to the related objects manager on the forward and reverse sides of
 |      a many-to-many relation.
 |      
 |      In the example::
 |      
 |          class Pizza(Model):
 |              toppings = ManyToManyField(Topping, related_name='pizzas')
 |      
 |      ``Pizza.toppings`` and ``Topping.pizzas`` are ``ManyToManyDescriptor``
 |      instances.
 |      
 |      Most of the implementation is delegated to a dynamically defined manager
 |      class built by ``create_forward_many_to_many_manager()`` defined below.
 |  
 |  llooggeennttrryy__sseett
 |      Accessor to the related objects manager on the reverse side of a
 |      many-to-one relation.
 |      
 |      In the example::
 |      
 |          class Child(Model):
 |              parent = ForeignKey(Parent, related_name='children')
 |      
 |      ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.
 |      
 |      Most of the implementation is delegated to a dynamically defined manager
 |      class built by ``create_forward_many_to_many_manager()`` defined below.
 |  
 |  ttoo__wwhhoomm
 |      Accessor to the related objects manager on the reverse side of a
 |      many-to-one relation.
 |      
 |      In the example::
 |      
 |          class Child(Model):
 |              parent = ForeignKey(Parent, related_name='children')
 |      
 |      ``Parent.children`` is a ``ReverseManyToOneDescriptor`` instance.
 |      
 |      Most of the implementation is delegated to a dynamically defined manager
 |      class built by ``create_forward_many_to_many_manager()`` defined below.
 |  
 |  uusseerr__ppeerrmmiissssiioonnss
 |      Accessor to the related objects manager on the forward and reverse sides of
 |      a many-to-many relation.
 |      
 |      In the example::
 |      
 |          class Pizza(Model):
 |              toppings = ManyToManyField(Topping, related_name='pizzas')
 |      
 |      ``Pizza.toppings`` and ``Topping.pizzas`` are ``ManyToManyDescriptor``
 |      instances.
 |      
 |      Most of the implementation is delegated to a dynamically defined manager
 |      class built by ``create_forward_many_to_many_manager()`` defined below.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  DDooeessNNoottEExxiisstt = <class 'django.contrib.auth.models.User.DoesNotExist'>
 |      The requested object does not exist
 |  
 |  MMuullttiipplleeOObbjjeeccttssRReettuurrnneedd = <class 'django.contrib.auth.models.User.Mult...
 |      The query returned multiple objects when only one was expected.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUser:
 |  
 |  cclleeaann(self)
 |      Hook for doing any extra model-wide validation after clean() has been
 |      called on every field by self.clean_fields. Any ValidationError raised
 |      by this method will not be associated with a particular field; it will
 |      have a special-case association with the field defined by NON_FIELD_ERRORS.
 |  
 |  ddaattee__jjooiinneedd = <django.db.models.query_utils.DeferredAttribute object>
 |  eemmaaiill = <django.db.models.query_utils.DeferredAttribute object>
 |  eemmaaiill__uusseerr(self, subject, message, from_email=None, **kwargs)
 |      Send an email to this user.
 |  
 |  ffiirrsstt__nnaammee = <django.db.models.query_utils.DeferredAttribute object>
 |  ggeett__ffuullll__nnaammee(self)
 |      Return the first_name plus the last_name, with a space in between.
 |  
 |  ggeett__sshhoorrtt__nnaammee(self)
 |      Return the short name for the user.
 |  
 |  iiss__ssttaaffff = <django.db.models.query_utils.DeferredAttribute object>
 |  llaasstt__nnaammee = <django.db.models.query_utils.DeferredAttribute object>
 |  uusseerrnnaammee = <django.db.models.query_utils.DeferredAttribute object>
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUser:
 |  
 |  EEMMAAIILL__FFIIEELLDD = 'email'
 |  
 |  MMeettaa = <class 'django.contrib.auth.models.AbstractUser.Meta'>
 |  
 |  
 |  RREEQQUUIIRREEDD__FFIIEELLDDSS = ['email']
 |  
 |  UUSSEERRNNAAMMEE__FFIIEELLDD = 'username'
 |  
 |  oobbjjeeccttss = <django.contrib.auth.models.UserManager object>
 |  
 |  uusseerrnnaammee__vvaalliiddaattoorr = <django.contrib.auth.validators.UnicodeUsernameVa...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from django.contrib.auth.base_user.AbstractBaseUser:
 |  
 |  ____ssttrr____(self)
 |      Return str(self).
 |  
 |  cchheecckk__ppaasssswwoorrdd(self, raw_password)
 |      Return a boolean of whether the raw_password was correct. Handles
 |      hashing formats behind the scenes.
 |  
 |  ggeett__sseessssiioonn__aauutthh__hhaasshh(self)
 |      Return an HMAC of the password field.
 |  
 |  ggeett__uusseerrnnaammee(self)
 |      Return the username for this User.
 |  
 |  hhaass__uussaabbllee__ppaasssswwoorrdd(self)
 |      Return False if set_unusable_password() has been called for this user.
 |  
 |  llaasstt__llooggiinn = <django.db.models.query_utils.DeferredAttribute object>
 |  nnaattuurraall__kkeeyy(self)
 |  
 |  ppaasssswwoorrdd = <django.db.models.query_utils.DeferredAttribute object>
 |  ssaavvee(self, *args, **kwargs)
 |      Save the current instance. Override this in a subclass if you want to
 |      control the saving process.
 |      
 |      The 'force_insert' and 'force_update' parameters can be used to insist
 |      that the "save" must be an SQL insert or update (or equivalent for
 |      non-SQL backends), respectively. Normally, they should not be set.
 |  
 |  sseett__ppaasssswwoorrdd(self, raw_password)
 |  
 |  sseett__uunnuussaabbllee__ppaasssswwoorrdd(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from django.contrib.auth.base_user.AbstractBaseUser:
 |  
 |  ggeett__eemmaaiill__ffiieelldd__nnaammee() from django.db.models.base.ModelBase
 |  
 |  nnoorrmmaalliizzee__uusseerrnnaammee(username) from django.db.models.base.ModelBase
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from django.contrib.auth.base_user.AbstractBaseUser:
 |  
 |  iiss__aannoonnyymmoouuss
 |      Always return False. This is a way of comparing User objects to
 |      anonymous users.
 |  
 |  iiss__aauutthheennttiiccaatteedd
 |      Always return True. This is a way to tell if the user has been
 |      authenticated in templates.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from django.contrib.auth.base_user.AbstractBaseUser:
 |  
 |  iiss__aaccttiivvee = True
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PermissionsMixin:
 |  
 |  ggeett__aallll__ppeerrmmiissssiioonnss(self, obj=None)
 |  
 |  ggeett__ggrroouupp__ppeerrmmiissssiioonnss(self, obj=None)
 |      Return a list of permission strings that this user has through their
 |      groups. Query all available auth backends. If an object is passed in,
 |      return only permissions matching this object.
 |  
 |  ggeett__uusseerr__ppeerrmmiissssiioonnss(self, obj=None)
 |      Return a list of permission strings that this user has directly.
 |      Query all available auth backends. If an object is passed in,
 |      return only permissions matching this object.
 |  
 |  hhaass__mmoodduullee__ppeerrmmss(self, app_label)
 |      Return True if the user has any permissions in the given app label.
 |      Use similar logic as has_perm(), above.
 |  
 |  hhaass__ppeerrmm(self, perm, obj=None)
 |      Return True if the user has the specified permission. Query all
 |      available auth backends, but return immediately if any backend returns
 |      True. Thus, a user who has permission from a single auth backend is
 |      assumed to have permission in general. If an object is provided, check
 |      permissions for that object.
 |  
 |  hhaass__ppeerrmmss(self, perm_list, obj=None)
 |      Return True if the user has each of the specified permissions. If
 |      object is passed, check if the user has all required perms for it.
 |  
 |  iiss__ssuuppeerruusseerr = <django.db.models.query_utils.DeferredAttribute object>
 |  ----------------------------------------------------------------------
 |  Methods inherited from django.db.models.base.Model:
 |  
 |  ____eeqq____(self, other)
 |      Return self==value.
 |  
 |  ____ggeettssttaattee____(self)
 |      Hook to allow choosing the attributes to pickle.
 |  
 |  ____hhaasshh____(self)
 |      Return hash(self).
 |  
 |  ____iinniitt____(self, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ____rreedduuccee____(self)
 |      Helper for pickle.
 |  
 |  ____rreepprr____(self)
 |      Return repr(self).
 |  
 |  ____sseettssttaattee____(self, state)
 |  
 |  cclleeaann__ffiieellddss(self, exclude=None)
 |      Clean all fields and raise a ValidationError containing a dict
 |      of all validation errors if any occur.
 |  
 |  ddaattee__eerrrroorr__mmeessssaaggee(self, lookup_type, field_name, unique_for)
 |  
 |  ddeelleettee(self, using=None, keep_parents=False)
 |  
 |  ffuullll__cclleeaann(self, exclude=None, validate_unique=True)
 |      Call clean_fields(), clean(), and validate_unique() on the model.
 |      Raise a ValidationError for any errors that occur.
 |  
 |  ggeett__ddeeffeerrrreedd__ffiieellddss(self)
 |      Return a set containing names of deferred fields for this instance.
 |  
 |  pprreeppaarree__ddaattaabbaassee__ssaavvee(self, field)
 |  
 |  rreeffrreesshh__ffrroomm__ddbb(self, using=None, fields=None)
 |      Reload field values from the database.
 |      
 |      By default, the reloading happens from the database this instance was
 |      loaded from, or by the read router if this instance wasn't loaded from
 |      any database. The using parameter will override the default.
 |      
 |      Fields can be used to specify which fields to reload. The fields
 |      should be an iterable of field attnames. If fields is None, then
 |      all non-deferred fields are reloaded.
 |      
 |      When accessing deferred fields of an instance, the deferred loading
 |      of the field will call this method.
 |  
 |  ssaavvee__bbaassee(self, raw=False, force_insert=False, force_update=False, using=None, update_fields=None)
 |      Handle the parts of saving which should be done only once per save,
 |      yet need to be done in raw saves, too. This includes some sanity
 |      checks and signal sending.
 |      
 |      The 'raw' argument is telling save_base not to save any parent
 |      models and not to do any changes to the values before save. This
 |      is used by fixture loading.
 |  
 |  sseerriiaalliizzaabbllee__vvaalluuee(self, field_name)
 |      Return the value of the field name for this instance. If the field is
 |      a foreign key, return the id value instead of the object. If there's
 |      no Field object with this name on the model, return the model
 |      attribute's value.
 |      
 |      Used to serialize a field's value (in the serializer, or form output,
 |      for example). Normally, you would just access the attribute directly
 |      and not use this method.
 |  
 |  uunniiqquuee__eerrrroorr__mmeessssaaggee(self, model_class, unique_check)
 |  
 |  vvaalliiddaattee__uunniiqquuee(self, exclude=None)
 |      Check unique constraints on the model and raise ValidationError if any
 |      failed.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from django.db.models.base.Model:
 |  
 |  cchheecckk(**kwargs) from django.db.models.base.ModelBase
 |  
 |  ffrroomm__ddbb(db, field_names, values) from django.db.models.base.ModelBase
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from django.db.models.base.Model:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ppkk
